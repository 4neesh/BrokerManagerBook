Order book project

Thought process

My first thought relates to the storage of orders.
They need to be sorted (by price) and there can be multiple items at a single price
I want to be able to store the price, possibly as an array at each level.
As orders come and go, the size of the levels may change frequently so I will not want to use an array, but a list instead,

First we want to add an orderId to each transaction.
As orderId is a string, I want to create an incrementing value and parse it as a string.
Atomic integer will be used safely in mutli-threaded applications

How to store the two bid and ask lists:
1.	Need to be sorted
2.	Need to store same objects at each level
3.	Need to have access to remove
4.	Need to have access to add within
5.	Need to have access to individual ones to modify

The real challenge is maintaining the order to the lists
Decided to go on a hash table, the hash values will be directed by the price of the trade, the hashtable will implement chaining to provide near-constant time access. And a separate list for the prices will be stored in a sorted format to obtain the list of sorted values.


I decided to add the interface orderinterface to make it easier to implement

OrderBookManagerImpl uses dependency injection for the ask and bid book instances.
